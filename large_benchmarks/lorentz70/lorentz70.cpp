#include <cstdio>
#include <iostream>
#include <unistd.h>
#include <cstdlib>
#include<cmath>
#include <quadmath.h>
#include <time.h>

#define _low 1.0
#define _high 2.0

using namespace std;


double _x ;
double _y ;
double _z ;

template<class T>
void init() {

	_x = _low + static_cast<T> (rand())/(static_cast<T>(RAND_MAX/(_high - _low))) ;
	_y = _low + static_cast<T> (rand())/(static_cast<T>(RAND_MAX/(_high - _low))) ;
	_z = _low + static_cast<T> (rand())/(static_cast<T>(RAND_MAX/(_high - _low))) ;
}

template<class T>
T execute_spec_precision()
{
  T x = (T) _x ;
  T y = (T) _y ;
  T z = (T) _z ;

  // begin expr
	T	x_1_0  = (x + 10.0*(y - x)*0.005);
	T	x_1_1  = (y + (28.0*x - y - x*z)*0.005);
	T	x_1_2  = (z + (x*y - 2.666667*z)*0.005);
	T	x_2_0  = (x_1_0 + 10.0*(x_1_1 - x_1_0)*0.005);
	T	x_2_1  = (x_1_1 + (28.0*x_1_0 - x_1_1 - x_1_0*x_1_2)*0.005);
	T	x_2_2  = (x_1_2 + (x_1_0*x_1_1 - 2.666667*x_1_2)*0.005);
	T	x_3_0  = (x_2_0 + 10.0*(x_2_1 - x_2_0)*0.005);
	T	x_3_1  = (x_2_1 + (28.0*x_2_0 - x_2_1 - x_2_0*x_2_2)*0.005);
	T	x_3_2  = (x_2_2 + (x_2_0*x_2_1 - 2.666667*x_2_2)*0.005);
	T	x_4_0  = (x_3_0 + 10.0*(x_3_1 - x_3_0)*0.005);
	T	x_4_1  = (x_3_1 + (28.0*x_3_0 - x_3_1 - x_3_0*x_3_2)*0.005);
	T	x_4_2  = (x_3_2 + (x_3_0*x_3_1 - 2.666667*x_3_2)*0.005);
	T	x_5_0  = (x_4_0 + 10.0*(x_4_1 - x_4_0)*0.005);
	T	x_5_1  = (x_4_1 + (28.0*x_4_0 - x_4_1 - x_4_0*x_4_2)*0.005);
	T	x_5_2  = (x_4_2 + (x_4_0*x_4_1 - 2.666667*x_4_2)*0.005);
	T	x_6_0  = (x_5_0 + 10.0*(x_5_1 - x_5_0)*0.005);
	T	x_6_1  = (x_5_1 + (28.0*x_5_0 - x_5_1 - x_5_0*x_5_2)*0.005);
	T	x_6_2  = (x_5_2 + (x_5_0*x_5_1 - 2.666667*x_5_2)*0.005);
	T	x_7_0  = (x_6_0 + 10.0*(x_6_1 - x_6_0)*0.005);
	T	x_7_1  = (x_6_1 + (28.0*x_6_0 - x_6_1 - x_6_0*x_6_2)*0.005);
	T	x_7_2  = (x_6_2 + (x_6_0*x_6_1 - 2.666667*x_6_2)*0.005);
	T	x_8_0  = (x_7_0 + 10.0*(x_7_1 - x_7_0)*0.005);
	T	x_8_1  = (x_7_1 + (28.0*x_7_0 - x_7_1 - x_7_0*x_7_2)*0.005);
	T	x_8_2  = (x_7_2 + (x_7_0*x_7_1 - 2.666667*x_7_2)*0.005);
	T	x_9_0  = (x_8_0 + 10.0*(x_8_1 - x_8_0)*0.005);
	T	x_9_1  = (x_8_1 + (28.0*x_8_0 - x_8_1 - x_8_0*x_8_2)*0.005);
	T	x_9_2  = (x_8_2 + (x_8_0*x_8_1 - 2.666667*x_8_2)*0.005);
	T	x_10_0  = (x_9_0 + 10.0*(x_9_1 - x_9_0)*0.005);
	T	x_10_1  = (x_9_1 + (28.0*x_9_0 - x_9_1 - x_9_0*x_9_2)*0.005);
	T	x_10_2  = (x_9_2 + (x_9_0*x_9_1 - 2.666667*x_9_2)*0.005);
	T	x_11_0  = (x_10_0 + 10.0*(x_10_1 - x_10_0)*0.005);
	T	x_11_1  = (x_10_1 + (28.0*x_10_0 - x_10_1 - x_10_0*x_10_2)*0.005);
	T	x_11_2  = (x_10_2 + (x_10_0*x_10_1 - 2.666667*x_10_2)*0.005);
	T	x_12_0  = (x_11_0 + 10.0*(x_11_1 - x_11_0)*0.005);
	T	x_12_1  = (x_11_1 + (28.0*x_11_0 - x_11_1 - x_11_0*x_11_2)*0.005);
	T	x_12_2  = (x_11_2 + (x_11_0*x_11_1 - 2.666667*x_11_2)*0.005);
	T	x_13_0  = (x_12_0 + 10.0*(x_12_1 - x_12_0)*0.005);
	T	x_13_1  = (x_12_1 + (28.0*x_12_0 - x_12_1 - x_12_0*x_12_2)*0.005);
	T	x_13_2  = (x_12_2 + (x_12_0*x_12_1 - 2.666667*x_12_2)*0.005);
	T	x_14_0  = (x_13_0 + 10.0*(x_13_1 - x_13_0)*0.005);
	T	x_14_1  = (x_13_1 + (28.0*x_13_0 - x_13_1 - x_13_0*x_13_2)*0.005);
	T	x_14_2  = (x_13_2 + (x_13_0*x_13_1 - 2.666667*x_13_2)*0.005);
	T	x_15_0  = (x_14_0 + 10.0*(x_14_1 - x_14_0)*0.005);
	T	x_15_1  = (x_14_1 + (28.0*x_14_0 - x_14_1 - x_14_0*x_14_2)*0.005);
	T	x_15_2  = (x_14_2 + (x_14_0*x_14_1 - 2.666667*x_14_2)*0.005);
	T	x_16_0  = (x_15_0 + 10.0*(x_15_1 - x_15_0)*0.005);
	T	x_16_1  = (x_15_1 + (28.0*x_15_0 - x_15_1 - x_15_0*x_15_2)*0.005);
	T	x_16_2  = (x_15_2 + (x_15_0*x_15_1 - 2.666667*x_15_2)*0.005);
	T	x_17_0  = (x_16_0 + 10.0*(x_16_1 - x_16_0)*0.005);
	T	x_17_1  = (x_16_1 + (28.0*x_16_0 - x_16_1 - x_16_0*x_16_2)*0.005);
	T	x_17_2  = (x_16_2 + (x_16_0*x_16_1 - 2.666667*x_16_2)*0.005);
	T	x_18_0  = (x_17_0 + 10.0*(x_17_1 - x_17_0)*0.005);
	T	x_18_1  = (x_17_1 + (28.0*x_17_0 - x_17_1 - x_17_0*x_17_2)*0.005);
	T	x_18_2  = (x_17_2 + (x_17_0*x_17_1 - 2.666667*x_17_2)*0.005);
	T	x_19_0  = (x_18_0 + 10.0*(x_18_1 - x_18_0)*0.005);
	T	x_19_1  = (x_18_1 + (28.0*x_18_0 - x_18_1 - x_18_0*x_18_2)*0.005);
	T	x_19_2  = (x_18_2 + (x_18_0*x_18_1 - 2.666667*x_18_2)*0.005);
	T	x_20_0  = (x_19_0 + 10.0*(x_19_1 - x_19_0)*0.005);
	T	x_20_1  = (x_19_1 + (28.0*x_19_0 - x_19_1 - x_19_0*x_19_2)*0.005);
	T	x_20_2  = (x_19_2 + (x_19_0*x_19_1 - 2.666667*x_19_2)*0.005);
	T	x_21_0  = (x_20_0 + 10.0*(x_20_1 - x_20_0)*0.005);
	T	x_21_1  = (x_20_1 + (28.0*x_20_0 - x_20_1 - x_20_0*x_20_2)*0.005);
	T	x_21_2  = (x_20_2 + (x_20_0*x_20_1 - 2.666667*x_20_2)*0.005);
	T	x_22_0  = (x_21_0 + 10.0*(x_21_1 - x_21_0)*0.005);
	T	x_22_1  = (x_21_1 + (28.0*x_21_0 - x_21_1 - x_21_0*x_21_2)*0.005);
	T	x_22_2  = (x_21_2 + (x_21_0*x_21_1 - 2.666667*x_21_2)*0.005);
	T	x_23_0  = (x_22_0 + 10.0*(x_22_1 - x_22_0)*0.005);
	T	x_23_1  = (x_22_1 + (28.0*x_22_0 - x_22_1 - x_22_0*x_22_2)*0.005);
	T	x_23_2  = (x_22_2 + (x_22_0*x_22_1 - 2.666667*x_22_2)*0.005);
	T	x_24_0  = (x_23_0 + 10.0*(x_23_1 - x_23_0)*0.005);
	T	x_24_1  = (x_23_1 + (28.0*x_23_0 - x_23_1 - x_23_0*x_23_2)*0.005);
	T	x_24_2  = (x_23_2 + (x_23_0*x_23_1 - 2.666667*x_23_2)*0.005);
	T	x_25_0  = (x_24_0 + 10.0*(x_24_1 - x_24_0)*0.005);
	T	x_25_1  = (x_24_1 + (28.0*x_24_0 - x_24_1 - x_24_0*x_24_2)*0.005);
	T	x_25_2  = (x_24_2 + (x_24_0*x_24_1 - 2.666667*x_24_2)*0.005);
	T	x_26_0  = (x_25_0 + 10.0*(x_25_1 - x_25_0)*0.005);
	T	x_26_1  = (x_25_1 + (28.0*x_25_0 - x_25_1 - x_25_0*x_25_2)*0.005);
	T	x_26_2  = (x_25_2 + (x_25_0*x_25_1 - 2.666667*x_25_2)*0.005);
	T	x_27_0  = (x_26_0 + 10.0*(x_26_1 - x_26_0)*0.005);
	T	x_27_1  = (x_26_1 + (28.0*x_26_0 - x_26_1 - x_26_0*x_26_2)*0.005);
	T	x_27_2  = (x_26_2 + (x_26_0*x_26_1 - 2.666667*x_26_2)*0.005);
	T	x_28_0  = (x_27_0 + 10.0*(x_27_1 - x_27_0)*0.005);
	T	x_28_1  = (x_27_1 + (28.0*x_27_0 - x_27_1 - x_27_0*x_27_2)*0.005);
	T	x_28_2  = (x_27_2 + (x_27_0*x_27_1 - 2.666667*x_27_2)*0.005);
	T	x_29_0  = (x_28_0 + 10.0*(x_28_1 - x_28_0)*0.005);
	T	x_29_1  = (x_28_1 + (28.0*x_28_0 - x_28_1 - x_28_0*x_28_2)*0.005);
	T	x_29_2  = (x_28_2 + (x_28_0*x_28_1 - 2.666667*x_28_2)*0.005);
	T	x_30_0  = (x_29_0 + 10.0*(x_29_1 - x_29_0)*0.005);
	T	x_30_1  = (x_29_1 + (28.0*x_29_0 - x_29_1 - x_29_0*x_29_2)*0.005);
	T	x_30_2  = (x_29_2 + (x_29_0*x_29_1 - 2.666667*x_29_2)*0.005);
	T	x_31_0  = (x_30_0 + 10.0*(x_30_1 - x_30_0)*0.005);
	T	x_31_1  = (x_30_1 + (28.0*x_30_0 - x_30_1 - x_30_0*x_30_2)*0.005);
	T	x_31_2  = (x_30_2 + (x_30_0*x_30_1 - 2.666667*x_30_2)*0.005);
	T	x_32_0  = (x_31_0 + 10.0*(x_31_1 - x_31_0)*0.005);
	T	x_32_1  = (x_31_1 + (28.0*x_31_0 - x_31_1 - x_31_0*x_31_2)*0.005);
	T	x_32_2  = (x_31_2 + (x_31_0*x_31_1 - 2.666667*x_31_2)*0.005);
	T	x_33_0  = (x_32_0 + 10.0*(x_32_1 - x_32_0)*0.005);
	T	x_33_1  = (x_32_1 + (28.0*x_32_0 - x_32_1 - x_32_0*x_32_2)*0.005);
	T	x_33_2  = (x_32_2 + (x_32_0*x_32_1 - 2.666667*x_32_2)*0.005);
	T	x_34_0  = (x_33_0 + 10.0*(x_33_1 - x_33_0)*0.005);
	T	x_34_1  = (x_33_1 + (28.0*x_33_0 - x_33_1 - x_33_0*x_33_2)*0.005);
	T	x_34_2  = (x_33_2 + (x_33_0*x_33_1 - 2.666667*x_33_2)*0.005);
	T	x_35_0  = (x_34_0 + 10.0*(x_34_1 - x_34_0)*0.005);
	T	x_35_1  = (x_34_1 + (28.0*x_34_0 - x_34_1 - x_34_0*x_34_2)*0.005);
	T	x_35_2  = (x_34_2 + (x_34_0*x_34_1 - 2.666667*x_34_2)*0.005);
	T	x_36_0  = (x_35_0 + 10.0*(x_35_1 - x_35_0)*0.005);
	T	x_36_1  = (x_35_1 + (28.0*x_35_0 - x_35_1 - x_35_0*x_35_2)*0.005);
	T	x_36_2  = (x_35_2 + (x_35_0*x_35_1 - 2.666667*x_35_2)*0.005);
	T	x_37_0  = (x_36_0 + 10.0*(x_36_1 - x_36_0)*0.005);
	T	x_37_1  = (x_36_1 + (28.0*x_36_0 - x_36_1 - x_36_0*x_36_2)*0.005);
	T	x_37_2  = (x_36_2 + (x_36_0*x_36_1 - 2.666667*x_36_2)*0.005);
	T	x_38_0  = (x_37_0 + 10.0*(x_37_1 - x_37_0)*0.005);
	T	x_38_1  = (x_37_1 + (28.0*x_37_0 - x_37_1 - x_37_0*x_37_2)*0.005);
	T	x_38_2  = (x_37_2 + (x_37_0*x_37_1 - 2.666667*x_37_2)*0.005);
	T	x_39_0  = (x_38_0 + 10.0*(x_38_1 - x_38_0)*0.005);
	T	x_39_1  = (x_38_1 + (28.0*x_38_0 - x_38_1 - x_38_0*x_38_2)*0.005);
	T	x_39_2  = (x_38_2 + (x_38_0*x_38_1 - 2.666667*x_38_2)*0.005);
	T	x_40_0  = (x_39_0 + 10.0*(x_39_1 - x_39_0)*0.005);
	T	x_40_1  = (x_39_1 + (28.0*x_39_0 - x_39_1 - x_39_0*x_39_2)*0.005);
	T	x_40_2  = (x_39_2 + (x_39_0*x_39_1 - 2.666667*x_39_2)*0.005);
	T	x_41_0  = (x_40_0 + 10.0*(x_40_1 - x_40_0)*0.005);
	T	x_41_1  = (x_40_1 + (28.0*x_40_0 - x_40_1 - x_40_0*x_40_2)*0.005);
	T	x_41_2  = (x_40_2 + (x_40_0*x_40_1 - 2.666667*x_40_2)*0.005);
	T	x_42_0  = (x_41_0 + 10.0*(x_41_1 - x_41_0)*0.005);
	T	x_42_1  = (x_41_1 + (28.0*x_41_0 - x_41_1 - x_41_0*x_41_2)*0.005);
	T	x_42_2  = (x_41_2 + (x_41_0*x_41_1 - 2.666667*x_41_2)*0.005);
	T	x_43_0  = (x_42_0 + 10.0*(x_42_1 - x_42_0)*0.005);
	T	x_43_1  = (x_42_1 + (28.0*x_42_0 - x_42_1 - x_42_0*x_42_2)*0.005);
	T	x_43_2  = (x_42_2 + (x_42_0*x_42_1 - 2.666667*x_42_2)*0.005);
	T	x_44_0  = (x_43_0 + 10.0*(x_43_1 - x_43_0)*0.005);
	T	x_44_1  = (x_43_1 + (28.0*x_43_0 - x_43_1 - x_43_0*x_43_2)*0.005);
	T	x_44_2  = (x_43_2 + (x_43_0*x_43_1 - 2.666667*x_43_2)*0.005);
	T	x_45_0  = (x_44_0 + 10.0*(x_44_1 - x_44_0)*0.005);
	T	x_45_1  = (x_44_1 + (28.0*x_44_0 - x_44_1 - x_44_0*x_44_2)*0.005);
	T	x_45_2  = (x_44_2 + (x_44_0*x_44_1 - 2.666667*x_44_2)*0.005);
	T	x_46_0  = (x_45_0 + 10.0*(x_45_1 - x_45_0)*0.005);
	T	x_46_1  = (x_45_1 + (28.0*x_45_0 - x_45_1 - x_45_0*x_45_2)*0.005);
	T	x_46_2  = (x_45_2 + (x_45_0*x_45_1 - 2.666667*x_45_2)*0.005);
	T	x_47_0  = (x_46_0 + 10.0*(x_46_1 - x_46_0)*0.005);
	T	x_47_1  = (x_46_1 + (28.0*x_46_0 - x_46_1 - x_46_0*x_46_2)*0.005);
	T	x_47_2  = (x_46_2 + (x_46_0*x_46_1 - 2.666667*x_46_2)*0.005);
	T	x_48_0  = (x_47_0 + 10.0*(x_47_1 - x_47_0)*0.005);
	T	x_48_1  = (x_47_1 + (28.0*x_47_0 - x_47_1 - x_47_0*x_47_2)*0.005);
	T	x_48_2  = (x_47_2 + (x_47_0*x_47_1 - 2.666667*x_47_2)*0.005);
	T	x_49_0  = (x_48_0 + 10.0*(x_48_1 - x_48_0)*0.005);
	T	x_49_1  = (x_48_1 + (28.0*x_48_0 - x_48_1 - x_48_0*x_48_2)*0.005);
	T	x_49_2  = (x_48_2 + (x_48_0*x_48_1 - 2.666667*x_48_2)*0.005);
	T	x_50_0  = (x_49_0 + 10.0*(x_49_1 - x_49_0)*0.005);
	T	x_50_1  = (x_49_1 + (28.0*x_49_0 - x_49_1 - x_49_0*x_49_2)*0.005);
	T	x_50_2  = (x_49_2 + (x_49_0*x_49_1 - 2.666667*x_49_2)*0.005);
	T	x_51_0  = (x_50_0 + 10.0*(x_50_1 - x_50_0)*0.005);
	T	x_51_1  = (x_50_1 + (28.0*x_50_0 - x_50_1 - x_50_0*x_50_2)*0.005);
	T	x_51_2  = (x_50_2 + (x_50_0*x_50_1 - 2.666667*x_50_2)*0.005);
	T	x_52_0  = (x_51_0 + 10.0*(x_51_1 - x_51_0)*0.005);
	T	x_52_1  = (x_51_1 + (28.0*x_51_0 - x_51_1 - x_51_0*x_51_2)*0.005);
	T	x_52_2  = (x_51_2 + (x_51_0*x_51_1 - 2.666667*x_51_2)*0.005);
	T	x_53_0  = (x_52_0 + 10.0*(x_52_1 - x_52_0)*0.005);
	T	x_53_1  = (x_52_1 + (28.0*x_52_0 - x_52_1 - x_52_0*x_52_2)*0.005);
	T	x_53_2  = (x_52_2 + (x_52_0*x_52_1 - 2.666667*x_52_2)*0.005);
	T	x_54_0  = (x_53_0 + 10.0*(x_53_1 - x_53_0)*0.005);
	T	x_54_1  = (x_53_1 + (28.0*x_53_0 - x_53_1 - x_53_0*x_53_2)*0.005);
	T	x_54_2  = (x_53_2 + (x_53_0*x_53_1 - 2.666667*x_53_2)*0.005);
	T	x_55_0  = (x_54_0 + 10.0*(x_54_1 - x_54_0)*0.005);
	T	x_55_1  = (x_54_1 + (28.0*x_54_0 - x_54_1 - x_54_0*x_54_2)*0.005);
	T	x_55_2  = (x_54_2 + (x_54_0*x_54_1 - 2.666667*x_54_2)*0.005);
	T	x_56_0  = (x_55_0 + 10.0*(x_55_1 - x_55_0)*0.005);
	T	x_56_1  = (x_55_1 + (28.0*x_55_0 - x_55_1 - x_55_0*x_55_2)*0.005);
	T	x_56_2  = (x_55_2 + (x_55_0*x_55_1 - 2.666667*x_55_2)*0.005);
	T	x_57_0  = (x_56_0 + 10.0*(x_56_1 - x_56_0)*0.005);
	T	x_57_1  = (x_56_1 + (28.0*x_56_0 - x_56_1 - x_56_0*x_56_2)*0.005);
	T	x_57_2  = (x_56_2 + (x_56_0*x_56_1 - 2.666667*x_56_2)*0.005);
	T	x_58_0  = (x_57_0 + 10.0*(x_57_1 - x_57_0)*0.005);
	T	x_58_1  = (x_57_1 + (28.0*x_57_0 - x_57_1 - x_57_0*x_57_2)*0.005);
	T	x_58_2  = (x_57_2 + (x_57_0*x_57_1 - 2.666667*x_57_2)*0.005);
	T	x_59_0  = (x_58_0 + 10.0*(x_58_1 - x_58_0)*0.005);
	T	x_59_1  = (x_58_1 + (28.0*x_58_0 - x_58_1 - x_58_0*x_58_2)*0.005);
	T	x_59_2  = (x_58_2 + (x_58_0*x_58_1 - 2.666667*x_58_2)*0.005);
	T	x_60_0  = (x_59_0 + 10.0*(x_59_1 - x_59_0)*0.005);
	T	x_60_1  = (x_59_1 + (28.0*x_59_0 - x_59_1 - x_59_0*x_59_2)*0.005);
	T	x_60_2  = (x_59_2 + (x_59_0*x_59_1 - 2.666667*x_59_2)*0.005);
	T	x_61_0  = (x_60_0 + 10.0*(x_60_1 - x_60_0)*0.005);
	T	x_61_1  = (x_60_1 + (28.0*x_60_0 - x_60_1 - x_60_0*x_60_2)*0.005);
	T	x_61_2  = (x_60_2 + (x_60_0*x_60_1 - 2.666667*x_60_2)*0.005);
	T	x_62_0  = (x_61_0 + 10.0*(x_61_1 - x_61_0)*0.005);
	T	x_62_1  = (x_61_1 + (28.0*x_61_0 - x_61_1 - x_61_0*x_61_2)*0.005);
	T	x_62_2  = (x_61_2 + (x_61_0*x_61_1 - 2.666667*x_61_2)*0.005);
	T	x_63_0  = (x_62_0 + 10.0*(x_62_1 - x_62_0)*0.005);
	T	x_63_1  = (x_62_1 + (28.0*x_62_0 - x_62_1 - x_62_0*x_62_2)*0.005);
	T	x_63_2  = (x_62_2 + (x_62_0*x_62_1 - 2.666667*x_62_2)*0.005);
	T	x_64_0  = (x_63_0 + 10.0*(x_63_1 - x_63_0)*0.005);
	T	x_64_1  = (x_63_1 + (28.0*x_63_0 - x_63_1 - x_63_0*x_63_2)*0.005);
	T	x_64_2  = (x_63_2 + (x_63_0*x_63_1 - 2.666667*x_63_2)*0.005);
	T	x_65_0  = (x_64_0 + 10.0*(x_64_1 - x_64_0)*0.005);
	T	x_65_1  = (x_64_1 + (28.0*x_64_0 - x_64_1 - x_64_0*x_64_2)*0.005);
	T	x_65_2  = (x_64_2 + (x_64_0*x_64_1 - 2.666667*x_64_2)*0.005);
	T	x_66_0  = (x_65_0 + 10.0*(x_65_1 - x_65_0)*0.005);
	T	x_66_1  = (x_65_1 + (28.0*x_65_0 - x_65_1 - x_65_0*x_65_2)*0.005);
	T	x_66_2  = (x_65_2 + (x_65_0*x_65_1 - 2.666667*x_65_2)*0.005);
	T	x_67_0  = (x_66_0 + 10.0*(x_66_1 - x_66_0)*0.005);
	T	x_67_1  = (x_66_1 + (28.0*x_66_0 - x_66_1 - x_66_0*x_66_2)*0.005);
	T	x_67_2  = (x_66_2 + (x_66_0*x_66_1 - 2.666667*x_66_2)*0.005);
	T	x_68_0  = (x_67_0 + 10.0*(x_67_1 - x_67_0)*0.005);
	T	x_68_1  = (x_67_1 + (28.0*x_67_0 - x_67_1 - x_67_0*x_67_2)*0.005);
	T	x_68_2  = (x_67_2 + (x_67_0*x_67_1 - 2.666667*x_67_2)*0.005);
	T	x_69_0  = (x_68_0 + 10.0*(x_68_1 - x_68_0)*0.005);
	T	x_69_1  = (x_68_1 + (28.0*x_68_0 - x_68_1 - x_68_0*x_68_2)*0.005);
	T	x_69_2  = (x_68_2 + (x_68_0*x_68_1 - 2.666667*x_68_2)*0.005);
	T	x_70_0  = (x_69_0 + 10.0*(x_69_1 - x_69_0)*0.005);
	T	x_70_1  = (x_69_1 + (28.0*x_69_0 - x_69_1 - x_69_0*x_69_2)*0.005);
	T	x_70_2  = (x_69_2 + (x_69_0*x_69_1 - 2.666667*x_69_2)*0.005);
  
return x_70_1 ;
}


int main(int argc, char** argv)
{

	srand(time(0));
	FILE *fp ;
	int N;
	sscanf(argv[1], "%d", &N) ;
	fp = fopen("lorentz70_error_profile.csv", "w+");

	__float80 val_dp = 0;
	__float80 val_sp = 0;
	__float80 val_qp = 0;
	__float80 err_dp_sp = 0;
	__float80 err_qp_dp = 0;

	//int N = 100000 ;
	
	__float80 maxerrdp = 0.0 ;
	__float80 maxerrsp = 0.0 ;


	for (int i=0; i<N; i++) {

		init<double>();
		__float80 val_sp = (__float80) execute_spec_precision<float>();
		__float80 val_dp = (__float80) execute_spec_precision<double>();
		__float80 val_qp   = (__float80) execute_spec_precision<__float128>();

		err_dp_sp += fabs(val_dp - val_sp);
		err_qp_dp += fabs(val_qp - val_dp);
			if( maxerrdp < fabs(val_qp - val_dp)) maxerrdp = fabs(val_qp - val_dp) ;
		if( maxerrsp < fabs(val_dp - val_sp)) maxerrsp = fabs(val_dp - val_sp) ;
	fprintf(fp, "%0.50llf, %0.50llf\n",  fabs(val_dp - val_sp), fabs(val_qp - val_dp));

	}
	fclose(fp);

	cout << "Avg Error in DP -> " << err_qp_dp/N << endl ;
	cout << "Avg Error in SP -> " << err_dp_sp/N << endl ;
	cout << "Max Error in DP -> " << maxerrdp << endl ;
	cout << "Max Error in SP -> " << maxerrsp << endl ;

	return 1;


}
