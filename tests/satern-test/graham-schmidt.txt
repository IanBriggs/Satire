
INPUTS {
	Q11_0 fl64 : (0.14285714285714285, 1.0);
	Q12_0 fl64 : (0.0, 0.0);
	Q13_0 fl64 : (0.0, 0.0);
	Q21_0 fl64 : (0.0, 0.0);
	Q22_0 fl64 : (0.04, 1.0);
	Q23_0 fl64 : (0.0, 0.0);
	Q31_0 fl64 : (0.00038580246913580245,0.00038580246913580245);
	Q32_0 fl64 : (0.00038446751249519417,0.00038446751249519417);
	Q33_0 fl64 : (0.00038714672861014324,0.00038714672861014324);
	qj1_0 fl64 : (0.0, 0.0);
	qj2_0 fl64 : (0.0, 0.0);
	qj3_0 fl64 : (0.0, 0.0);
	r1_0  fl64 : (0.0, 0.0);
	r2_0  fl64 : (0.0, 0.0);
	r3_0  fl64 : (0.0, 0.0);

}

OUTPUTS {
	qj1_3 ;
	#rjj_2 ;
}

EXPRS {

	h1_1 rnd64 = ((( Q11_0 * qj1_0) + (Q21_0 * qj2_0)) + (Q31_0 * qj3_0)) ;
	h2_1 rnd64 = ((( Q12_0 * qj1_0) + (Q22_0 * qj2_0)) + (Q32_0 * qj3_0)) ;
	h3_1 rnd64 = ((( Q13_0 * qj1_0) + (Q23_0 * qj2_0)) + (Q33_0 * qj3_0)) ;

	qj1_1 rnd64 = Q31_0 + (qj1_0 - (((Q11_0 * h1_1) + (Q12_0 * h2_1)  ) + (Q13_0 * h3_1)  )) ;
	qj2_1 rnd64 = Q32_0 + (qj2_0 - (((Q21_0 * h1_1) + (Q22_0 * h2_1)  ) + (Q23_0 * h3_1)  )) ;
	qj3_1 rnd64 = Q33_0 + (qj3_0 - (((Q31_0 * h1_1) + (Q32_0 * h2_1)  ) + (Q33_0 * h3_1)  )) ;

	r1_1 rnd64 = r1_0 + h1_1 ;
	r2_1 rnd64 = r2_0 + h2_1 ;
	r3_1 rnd64 = r3_0 + h3_1 ;

	r_1 rnd64 = (qj1_1 * qj1_1) + (qj2_1 * qj2_1) * (qj3_1 * qj3_1) ;

	rjj_1 rnd64 = sqrt(r_1);

	## -------------------------------------------------------
	h1_2 rnd64 = ((( Q11_0 * qj1_1) + (Q21_0 * qj2_1)) + (Q31_0 * qj3_1)) ;
	h2_2 rnd64 = ((( Q12_0 * qj1_1) + (Q22_0 * qj2_1)) + (Q32_0 * qj3_1)) ;
	h3_2 rnd64 = ((( Q13_0 * qj1_1) + (Q23_0 * qj2_1)) + (Q33_0 * qj3_1)) ;

	qj1_2 rnd64 = Q31_0 + (qj1_1 - (((Q11_0 * h1_2) + (Q12_0 * h2_2)  ) + (Q13_0 * h3_2)  )) ;
	qj2_2 rnd64 = Q32_0 + (qj2_1 - (((Q21_0 * h1_2) + (Q22_0 * h2_2)  ) + (Q23_0 * h3_2)  )) ;
	qj3_2 rnd64 = Q33_0 + (qj3_1 - (((Q31_0 * h1_2) + (Q32_0 * h2_2)  ) + (Q33_0 * h3_2)  )) ;

	r1_2 rnd64 = r1_1 + h1_2 ;
	r2_2 rnd64 = r2_1 + h2_2 ;
	r3_2 rnd64 = r3_1 + h3_2 ;

	r_2 rnd64 = (qj1_2 * qj1_2) + (qj2_2 * qj2_2) * (qj3_2 * qj3_2) ;

	rjj_2 rnd64 = sqrt(r_2);

	## ---------------------------------------------------------
	h1_3 rnd64 = ((( Q11_0 * qj1_2) + (Q21_0 * qj2_2)) + (Q31_0 * qj3_2)) ;
	h2_3 rnd64 = ((( Q12_0 * qj1_2) + (Q22_0 * qj2_2)) + (Q32_0 * qj3_2)) ;
	h3_3 rnd64 = ((( Q13_0 * qj1_2) + (Q23_0 * qj2_2)) + (Q33_0 * qj3_2)) ;

	qj1_3 rnd64 = Q31_0 + (qj1_2 - (((Q11_0 * h1_3) + (Q12_0 * h2_3)  ) + (Q13_0 * h3_3)  )) ;
	qj2_3 rnd64 = Q32_0 + (qj2_2 - (((Q21_0 * h1_3) + (Q22_0 * h2_3)  ) + (Q23_0 * h3_3)  )) ;
	qj3_3 rnd64 = Q33_0 + (qj3_2 - (((Q31_0 * h1_3) + (Q32_0 * h2_3)  ) + (Q33_0 * h3_3)  )) ;

	r1_3 rnd64 = r1_2 + h1_3 ;
	r2_3 rnd64 = r2_2 + h2_3 ;
	r3_3 rnd64 = r3_2 + h3_3 ;

	r_3 rnd64 = (qj1_3 * qj1_3) + (qj2_3 * qj2_3) * (qj3_3 * qj3_3) ;

	rjj_3 rnd64 = sqrt(r_3);

}
