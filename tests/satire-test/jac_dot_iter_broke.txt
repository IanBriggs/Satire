INPUTS { xm1  fl64 : (0,1) ;
		 xm2  fl64 : (0,1) ;
		 xm3  fl64 : (0,1) ;
		 x    fl64 : (0,1) ;
		 xp3  fl64 : (0,1) ;
		 xp2  fl64 : (0,1) ;
		 xp1  fl64 : (0,1) ;
	   }

OUTPUTS {  zj ; }

EXPRS {

	
	x1m2 rnd64 =  (0.25 * xm3 + 0.5 * xm2 + 0.25 * xm1);
	x1m1 rnd64 =  (0.25 * xm2 + 0.5 * xm1 + 0.25 * x);
	x1   rnd64 =  (0.25 * xm1 + 0.5 * x + 0.25 * xp1);
	x1p1 rnd64 =  (0.25 * x + 0.5 * xp1 + 0.25 * xp2);
	x1p2 rnd64 =  (0.25 * xp1 + 0.5 * xp2 + 0.25 * xp3);

	x2m1 rnd64 =  (0.25 * x1m2 + 0.5 * x1m1 + 0.25 * x1);
	x2 rnd64 =  (0.25 * x1m1 + 0.5 * x1 + 0.25 * x1p1);
	x2p1 rnd64 =  (0.25 * x1 + 0.5 * x1p1 + 0.25 * x1p2);

	zh rnd64 =  (0.25 * x2m1 + 0.5 * x2 + 0.25 * x2p1);


	zj rnd64 =  ((0.33333 * ((0.33333*(0.33333*xm3 + 0.33333*xm2 + 0.33333*xm1)) + (0.33333*(0.33333*xm2 + 0.33333*xm1 + 0.33333*x)) + (0.33333*(0.33333*xm1 + 0.33333*x + 0.33333*xp1)))) + (0.33333 * ((0.33333*(0.33333*xm2 + 0.33333*xm1 + 0.33333*x)) + (0.33333*(0.33333*xm1 + 0.33333*x + 0.33333*xp1)) + (0.33333*(0.33333*x + 0.33333*xp1 + 0.33333*xp2)))) + (0.33333 * ((0.33333*(0.33333*xm1 + 0.33333*x + 0.33333*xp1)) + (0.33333*(0.33333*x + 0.33333*xp1 + 0.33333*xp2)) + (0.33333*(0.33333*xp1 + 0.33333*xp2 + 0.33333*xp3))))) ;

}
